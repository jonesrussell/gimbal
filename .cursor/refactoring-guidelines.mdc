# Refactoring Guidelines - MINIMAL FIX APPROACH

## Context Integration Principles
- **Match existing interfaces**: ResourceManager methods must align with contracts
- **Use context.Background()**: For initialization and existing call sites
- **Add cancellation checks**: `select { case <-ctx.Done(): return ctx.Err() }`
- **Timeout long operations**: Use `context.WithTimeout()` for resource loading
- **Build after each change**: Verify compilation after each method update

## Context Usage Patterns
- **Initialization**: `context.Background()` for startup operations
- **Resource Loading**: `context.WithTimeout(ctx, 5*time.Second)` 
- **Cancellation Checks**: Add in loops and long-running operations
- **Error Handling**: Return `ctx.Err()` when context is cancelled

## Interface Alignment Success
- ✅ **Contracts exist**: `ResourceSystem` interface already has context parameters
- ✅ **Implementation gap**: ResourceManager methods need context parameters
- ✅ **Call sites identified**: All locations needing context updates mapped
- ✅ **Type safety**: No `interface{}` anti-patterns remain

## Context Integration Checklist
- [ ] LoadSprite() signature updated with context
- [ ] GetSprite() signature updated with context  
- [ ] LoadAllSprites() signature updated with context
- [ ] GetDefaultFont() signature updated with context
- [ ] Cleanup() signature updated with context
- [ ] All call sites pass context parameters
- [ ] Cancellation checks added to resource operations
- [ ] Clean build: `go build ./...`
description:
globs:
alwaysApply: false
---
