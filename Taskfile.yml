# https://taskfile.dev

version: '3'

includes:
  builds:
    taskfile: ./Taskfile.build.yml
    optional: false
    internal: false
  tests:
    taskfile: ./Taskfile.test.yml
    optional: false
    internal: false

vars:
  USERNAME: jonesrussell
  PROJECTNAME: gimbal
  VERSION: v0.1.0
  BINARY_DIR: bin
  BINARY_NAME: gimbal
  WASM_EXEC_PATH: '{{.WASM_EXEC_PATH | default "$(go env GOROOT)/lib/wasm/wasm_exec.js"}}'
  ITCH_USERNAME: '{{.ITCH_USERNAME | default "jonesrussell"}}'
  ITCH_PATH: gimbal
  DEV_LOG_LEVEL: '{{.LOG_LEVEL | default "DEBUG"}}'
  PROD_LOG_LEVEL: '{{.LOG_LEVEL | default "INFO"}}'

tasks:
  default:
    desc: Show help
    cmds:
      - task: help

  dev:run:
    desc: Run in development mode (debug, pprof)
    aliases: [dev]
    cmds:
      - LOG_LEVEL={{.DEV_LOG_LEVEL}} go run -tags dev .

  dev:hot:
    desc: Run with hot reloading (Air)
    cmds:
      - |
        if ! command -v air >/dev/null 2>&1; then
          echo "Air not found. Install with: task install:tools" >&2
          exit 1
        fi
      - air

  dev:serve:
    desc: Serve web version locally (WASM)
    cmds:
      - |
        if ! command -v wasmserve >/dev/null 2>&1; then
          echo "wasmserve not found. Install with: task install:tools" >&2
          exit 1
        fi
      - wasmserve -http=":4242" -allow-origin='*' -tags .

  lint:all:
    desc: Lint, vet, and format code
    cmds:
      - go fmt ./...
      - go vet ./...
      - golangci-lint run ./...

  lint:fix:
    desc: Auto-fix lint issues
    cmds:
      - go fmt ./...
      - golangci-lint run --fix ./...

  deadcode:check:
    desc: Check for dead code
    cmds:
      - deadcode ./...

  generate:mocks:
    desc: Generate mocks
    cmds:
      - mkdir -p test/mocks
      - mockgen -source=internal/common/interfaces.go -destination=test/mocks/mock_input.go -package=mocks

  generate:all:
    desc: Run all code generation
    deps: [generate:mocks]

  deps:tidy:
    desc: Tidy and download Go modules
    cmds:
      - go mod tidy
      - go mod download

  deps:update:
    desc: Update all dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  deps:verify:
    desc: Verify dependencies
    cmds:
      - go mod verify

  install:tools:
    desc: Install dev tools
    cmds:
      - go install github.com/cosmtrek/air@latest
      - go install github.com/hajimehoshi/wasmserve@latest
      - go install go.uber.org/mock/mockgen@latest

  deploy:itch:
    desc: Deploy to itch.io
    deps: [clean:build, builds:all]
    cmds:
      - |
        if ! command -v butler >/dev/null 2>&1; then
          echo "Butler not found. Install from https://itch.io/docs/butler/" >&2
          exit 1
        fi
      - butler push --if-changed build/windows {{.ITCH_USERNAME}}/{{.ITCH_PATH}}:windows
      - butler push --if-changed build/linux {{.ITCH_USERNAME}}/{{.ITCH_PATH}}:linux-amd64
      - butler push build/web {{.ITCH_USERNAME}}/{{.ITCH_PATH}}:web

  clean:build:
    desc: Clean build artifacts
    cmds:
      - rm -rf build

  clean:test:
    desc: Clean test artifacts
    cmds:
      - rm -f coverage.out coverage.html

  clean:all:
    desc: Clean all artifacts
    deps: [clean:build, clean:test]
    cmds:
      - rm -rf {{.BINARY_DIR}}
      - go clean -cache -modcache -testcache

  check:all:
    desc: Run lint, deadcode, test:short, build:current
    cmds:
      - task: lint:all
      - task: deadcode:check
      - task: tests:short
      - task: builds:current

  ci:all:
    desc: Run full CI pipeline
    cmds:
      - task: deps:verify
      - task: generate:all
      - task: lint:all
      - task: tests:coverage
      - task: builds:all

  validate:project:
    desc: Validate project structure
    cmds:
      - |
        if [ ! -f go.mod ]; then
          echo "go.mod not found"
          exit 1
        fi
      - |
        if [ ! -f main.go ]; then
          echo "main.go not found"
          exit 1
        fi

  help:
    desc: Show available tasks
    cmds:
      - echo "Available tasks:"
      - task --list
